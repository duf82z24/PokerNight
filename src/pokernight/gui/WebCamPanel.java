/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package pokernight.gui;

import java.awt.image.BufferedImage;
import java.io.FileOutputStream;
import java.util.List;


import com.lti.civil.CaptureDeviceInfo;
import com.lti.civil.CaptureException;
import com.lti.civil.CaptureObserver;
import com.lti.civil.CaptureStream;
import com.lti.civil.CaptureSystem;
import com.lti.civil.CaptureSystemFactory;
import com.lti.civil.DefaultCaptureSystemFactorySingleton;
import com.lti.civil.Image;
import com.lti.civil.VideoFormat;
import com.lti.civil.awt.AWTImageConverter;
import com.lti.civil.impl.qtjava.QTCaptureSystemFactory;
import com.sun.image.codec.jpeg.JPEGCodec;
import com.sun.image.codec.jpeg.JPEGImageEncoder;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.event.ComponentListener;
import java.awt.geom.AffineTransform;
import java.io.IOException;
import java.io.InputStream;
import javax.imageio.ImageIO;

import org.jvcp.VideoCapture;


/**
 *
 * @author dufresnec
 */
public class WebCamPanel extends javax.swing.JPanel implements CaptureObserver{

    protected BufferedImage currentImage;
    WebCamThread camRunnable = null;
    Thread camThread = null;
    private boolean self = false;
  
    /**
     * Creates new form WebCamPanel
     */
    public WebCamPanel() {
       this(false);
    }
    
    public WebCamPanel(boolean isSelf)
    {
    	self = isSelf;
    	initComponents();
    }
  /*  
    public void startCapture()
    {
    	
        if(camRunnable != null)
            camRunnable.shutdown();
        
        camRunnable = new WebCamThread();
        camRunnable.setCaptureObserver(this);
        camThread = new Thread(camRunnable);
        camThread.start();
        
    	
    	System.out.println("Initializing Camera");
 	   VideoCapture qtc = VideoCapture.init();
       if (qtc == null) {
               System.out.println("Video capture subsystem not initialized");
               return;
       }

       if ((qtc.getDeviceList() == null) || (qtc.getDeviceList().length == 0)){
               System.out.println("No video capture device");
               return;
       }

       for (int i=0; i<qtc.getDeviceList().length;i++)
               if (qtc.getDeviceList()[i] != null)
                       System.out.println(i+" : Description: "+ qtc.getDeviceList()[i].getDescription());

       qtc.setDevice( qtc.getDeviceList()[0] );      

       qtc.start();
       
       if(qtc.getCaptureComponent() == null)
    	   System.out.println("null component");
       this.add(qtc.getCaptureComponent());
       qtc.getCaptureComponent().setVisible(true);
     
       System.out.println("Done Initializing Camera");
    }
*/
        @Override 
	public void onError(CaptureStream sender, CaptureException e)
	{	System.err.println("onError " + sender);
		e.printStackTrace();
	}

        public void updateImage(Image image)
        {
            currentImage = AWTImageConverter.toBufferedImage(image);
            repaint();
        }
        
        @Override
	public void onNewImage(CaptureStream sender, Image image)
	{	

		try
		{
			//final VideoFormat format = image.getFormat();
			//System.out.println("onNewImage format=" + WebCamPanel.videoFormatToString(format) + " length=" + image.getBytes().length);
			currentImage = AWTImageConverter.toBufferedImage(image);
		}
		catch (Exception e)
		{	e.printStackTrace();
			return;
		}


                repaint();
	}
 
        	
	public static String videoFormatToString(VideoFormat f)
	{
		return "Type=" + formatTypeToString(f.getFormatType()) + " Width=" + f.getWidth() + " Height=" + f.getHeight() + " FPS=" + f.getFPS(); 
	}
	
	private static String formatTypeToString(int f)
	{
		switch (f)
		{
			case VideoFormat.RGB24:
				return "RGB24";
			case VideoFormat.RGB32:
				return "RGB32";
			default:
				return "" + f + " (unknown)";
		}
	}
        
	/*
    @Override
    public void paintComponent(Graphics g)
    {
        super.paintComponent(g);
        Graphics2D g2d = (Graphics2D) g;

        //System.out.println("Drawing Image");
        AffineTransform scaleTransform = AffineTransform.getScaleInstance(0.35, 0.35);
        AffineTransform completeTransform = AffineTransform.getTranslateInstance(-50, -5);
        completeTransform.concatenate(scaleTransform);
        if(currentImage != null)
        {
            g2d.drawImage(currentImage, completeTransform, null);
        }
        
    }
*/
        
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.lightGray, java.awt.Color.white, java.awt.Color.darkGray, java.awt.Color.gray));

        /*
        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 394, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 294, Short.MAX_VALUE)
        );
        
       */
        if(self)
        {
	    	System.out.println("Initializing Camera");
	  	   VideoCapture qtc = VideoCapture.init();
	        if (qtc == null) {
	                System.out.println("Video capture subsystem not initialized");
	                return;
	        }
	
	        if ((qtc.getDeviceList() == null) || (qtc.getDeviceList().length == 0)){
	                System.out.println("No video capture device");
	                return;
	        }
	
	        for (int i=0; i<qtc.getDeviceList().length;i++)
	                if (qtc.getDeviceList()[i] != null)
	                        System.out.println(i+" : Description: "+ qtc.getDeviceList()[i].getDescription());
	
	        qtc.setDevice( qtc.getDeviceList()[0] );      
	
	       
	        
	        if(qtc.getCaptureComponent() == null)
	     	   System.out.println("null component");
	        this.add(qtc.getCaptureComponent());
	        qtc.getCaptureComponent().setVisible(true);
	      
	        System.out.println("Done Initializing Camera");
	        qtc.start();
        }
        
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}

class WebCamThread implements Runnable
{

    private boolean shutdown = false;
    private CaptureObserver _observer = null;
    
    public void setCaptureObserver(CaptureObserver observer)
    {
        _observer = observer;
    }
 
    
    public void shutdown()
    {
        shutdown = true;
    }
       public void run()
    {
        try
        {
           
        CaptureSystemFactory factory = DefaultCaptureSystemFactorySingleton.instance();
		CaptureSystem system = factory.createCaptureSystem();
		system.init();
		List list = system.getCaptureDeviceInfoList();
		for (int i = 0; i < list.size(); ++i)
		{
			CaptureDeviceInfo info = (CaptureDeviceInfo) list.get(i);
			
			System.out.println("Device ID " + i + ": " + info.getDeviceID());
			System.out.println("Description " + i + ": " + info.getDescription());
			

			CaptureStream captureStream = system.openCaptureDeviceStream(info.getDeviceID());
			
			System.out.println("Current format " + WebCamPanel.videoFormatToString(captureStream.getVideoFormat()));
			
			captureStream.setObserver(_observer);
			System.out.println("Available formats:");
			for (VideoFormat format : captureStream.enumVideoFormats())
			{
				System.out.println(" " + WebCamPanel.videoFormatToString(format));
			}
			
			final int MAX_FORMATS = 2;
			int count = 0;
			for (VideoFormat format : captureStream.enumVideoFormats())
			{
				if (count > MAX_FORMATS)
				{	System.out.println("Stopping after " + MAX_FORMATS + " formats.");	// could be a lot
					break;
				}
				System.out.println("Choosing format: " + WebCamPanel.videoFormatToString(format));
				captureStream.setVideoFormat(format);
				
				System.out.println("Capturing for 2 seconds...");
				captureStream.start();
				try
				{
                                     while(!shutdown)
					Thread.sleep(500);
				}
				catch (InterruptedException e)
				{	return;
				}
				captureStream.stop();
				++count;
			}
			System.out.println("disposing stream...");
			captureStream.dispose();
			
		}
		System.out.println("disposing system...");
		system.dispose();
		System.out.println("done.");
        }
        catch(CaptureException ce)
        {
            ce.printStackTrace();
        }
    }
    
    
}